'#experience.jsx'
'jsx'
console.log('this is jsx')
import { OrbitControls } from '@react-three/drei'
import { Perf } from 'r3f-perf'
import { SSR, EffectComposer, Scanline, Glitch, Vignette, Noise, Bloom, DepthOfField } from '@react-three/postprocessing'
import { BlendFunction, GlitchMode } from 'postprocessing'
import { useControls } from 'leva'

export default function Experience() {

    const colors = useControls('colors',
        {
            colorsphere: '#d17f2c',
            colorcube: '#c3b0e8'
        })

    const datas = useControls('Scanline', {
        enabled: false,
        density: { value: 1.25, min: 0, max: 10, step: 0.01 }
    })
    const noise = useControls('noise', {
        enabled: false,
        BlendFunction: { enabled: true, value: BlendFunction.LUMINOSITY, options: BlendFunction }
    })
    const bloom = useControls('bloomintensity', {
        enabled: false,
        intensity: { value: 0.1, min: 0, max: 3, step: 0.01 }
    })
    const dark = useControls("vignette", {
        enabled: false,
        offset: { value: 0.3, min: 0.0, max: 4.0, step: 0.1 },
        darkness: { value: 0.9, min: 0.0, max: 4.0, step: 0.1 },
        blendFunction: { enabled: true, value: BlendFunction.AVERAGE, options: BlendFunction }
    })

    const depth = useControls('depth of field',
        {
            enabled: true,
            focusdistance: { value: 0.025, min: 0.0, max: 1.0, step: 0.001 },
            focallength: { value: 0.025, min: 0.0, max: 1.0, step: 0.001 },
            bokehscale: { value: 6.0, min: 0.0, max: 10, step: 1.0 }

        })
    const ssrProps = useControls('SSR Effect', {
        enabled: false,
        temporalResolve: true,
        STRETCH_MISSED_RAYS: true,
        USE_MRT: true,
        USE_NORMALMAP: true,
        USE_ROUGHNESSMAP: true,
        ENABLE_JITTERING: true,
        ENABLE_BLUR: true,
        temporalResolveMix: { value: 0.9, min: 0, max: 1 },
        temporalResolveCorrectionMix: { value: 0.25, min: 0, max: 1 },
        maxSamples: { value: 0, min: 0, max: 1 },
        resolutionScale: { value: 1, min: 0, max: 1 },
        blurMix: { value: 0.5, min: 0, max: 1 },
        blurKernelSize: { value: 8, min: 0, max: 8 },
        blurSharpness: { value: 0.5, min: 0, max: 1 },
        rayStep: { value: 0.3, min: 0, max: 1 },
        ssrintensity: { value: 1, min: 0, max: 5 },
        maxRoughness: { value: 0.1, min: 0, max: 1 },
        jitter: { value: 0.7, min: 0, max: 5 },
        jitterSpread: { value: 0.45, min: 0, max: 1 },
        jitterRough: { value: 0.1, min: 0, max: 1 },
        roughnessFadeOut: { value: 1, min: 0, max: 1 },
        rayFadeOut: { value: 0, min: 0, max: 1 },
        MAX_STEPS: { value: 20, min: 0, max: 20 },
        NUM_BINARY_SEARCH_STEPS: { value: 5, min: 0, max: 10 },
        maxDepthDifference: { value: 3, min: 0, max: 10 },
        maxDepth: { value: 1, min: 0, max: 1 },
        thickness: { value: 10, min: 0, max: 10 },
        ior: { value: 1.45, min: 0, max: 2 },
    })

    return <>
        <color args={['#000000']} attach="background" />
        <EffectComposer>
{/*             <Glitch
                delay={[0.5, 1]}
                duration={[0.1, 0.3]}
                strength={[0.2, 0.4]}
                mode={GlitchMode.CONSTANT_MILD}
            /> */}
            {datas.enabled && <Scanline density={datas.density} />}
            {depth.enabled && <DepthOfField {...depth} />}
            {noise.enabled && <Noise blendFunction={noise.BlendFunction} />}
            {bloom.enabled && <Bloom mipmapBlur intensity={bloom.intensity} luminanceThreshold={0} />}
            {ssrProps.enabled && <SSR {...ssrProps} />}
            {dark.enabled && <Vignette {...dark} />}
        </EffectComposer>
        <Perf position="top-left" />
        <OrbitControls makeDefault />

        <directionalLight castShadow position={[1, 2, 3]} intensity={1.5} />
        <ambientLight intensity={0.5} />

        <mesh castShadow position-x={- 2}>
            <sphereGeometry />
            <meshStandardMaterial
                //color={'#d17f2c'}
                color={colors.colorsphere}
                emissive={colors.colorsphere}
                emissiveIntensity={bloom.intensity}
                toneMapped={false} />
        </mesh>

        <mesh castShadow position-x={2} scale={1.5}>
            <boxGeometry />
            <meshStandardMaterial
                //meshBasicMaterial
                // color={([1.5, 1, 4])}  
                //color={'#c3b0e8'}
                color={colors.colorcube}
                emissive={colors.colorcube}
                emissiveIntensity={bloom.intensity}
                toneMapped={false} />
        </mesh>

        <mesh receiveShadow position-y={- 1} rotation-x={- Math.PI * 0.5} scale={10}>
            <planeGeometry />
            <meshStandardMaterial color="#555555" metalness={0} roughness={0} />

        </mesh>

    </>
}